dplyr::select(-thisPoint) %>%
pull()
return(output)
}
myCrossValidate <- function(dataset, id, dependentVariable, indVariables) {
allPredictions <- data.frame()
cvID_list <- unique(dataset[[id]])
for (i in cvID_list) {
thisFold <- i
cat("This hold out fold is", thisFold, "\n")
fold.train <- filter(dataset, dataset[[id]] != thisFold) %>% as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
fold.test  <- filter(dataset, dataset[[id]] == thisFold) %>% as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
regression <-
glm(countMVTheft ~ ., family = "poisson",
data = fold.train %>%
dplyr::select(-geometry, -id))
thisPrediction <-
mutate(fold.test, Prediction = predict(regression, fold.test, type = "response"))
allPredictions <-
rbind(allPredictions, thisPrediction)
}
return(st_sf(allPredictions))
}
#----------------------------------------------------------------------------------------------------------
# Colors ("https://coolors.co/gradient-palette/a8f368-f9035e?number=7")
bluePalette5 <- c("#eff3ff","#bdd7e7","#6baed6","#3182bd","#08519c")
blue2Palette5 <- c("#08519c","#3182bd","#6baed6","#bdd7e7","#eff3ff")
H_bluePalette5 <- c("#eff3ff","#bdd7e7","#6baed6","#3182bd","#252525")
orangePalette5 <- c("#FFF2E8","#FFD6B6","#FEB984","#FE9D51","#FD801F")
orange2Palette5 <- c("#FFDFD0","#FFB89F","#FF926E","#FF6B3D","#FF440C")
greyPalette5 <- c("#f7f7f7","#cccccc","#969696","#636363","#252525")
greenPalette5 <- c("#edf8e9","#bae4b3","#74c476","#31a354","#006d2c")
purplePalette5 <- c("#f2f0f7","#cbc9e2","#9e9ac8","#756bb1","#54278f")
#----------------------------------------------------------------------------------------------------------
# LoadAPI(Min's key)
census_api_key("4bbe4bead4e5817f6a6b79e62c5bea69e77f1887", overwrite = TRUE)
## Address Points
addresses <- read.csv("./data/Address_Points.zip", header = TRUE)
install.packages("readr")
install.packages("readr")
library(readr)
#setup
# Rmarkdown global setting
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(cache = TRUE)
knitr::opts_chunk$set(fig.align = 'center')
#----------------------------------------------------------------------------------------------------------
# Import libraries
library(tidyverse)
library(tidycensus)
library(sf)
library(spdep)
library(caret)
library(ckanr)
library(FNN)
library(grid)
library(gridExtra)
library(ggcorrplot)# plot correlation plot
library(corrplot)
library(corrr)      # another way to plot correlation plot
library(kableExtra)
library(jtools)     # for regression model plots
library(ggstance) # to support jtools plots
library(ggpubr)    # plotting R^2 value on ggplot point scatter
library(broom.mixed) # needed for effects plots
library(knitr)
library(rmarkdown)
library(RSocrata)
library(viridis)
library(ggplot2)
library(stargazer)
library(XML)
library(data.table)
library(ggpmisc)
library(patchwork)
library(spatstat)
library(raster)
library(classInt)   # for KDE and ML risk class intervals
library(tableHTML)
library(exactextractr)
library(sp)
library(units)
library(lubridate)
library(pscl)
library(cvms)
library(yardstick)
library(plotROC)
library(gganimate)
library(gifski)
library(readr)
#----------------------------------------------------------------------------------------------------------
# Temp
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
root.dir = "https://github.com/henryfeinstein/musa-rats/blob/main/data/"
# Etc
options(scipen=999)
options(tigris_class = "sf")
#----------------------------------------------------------------------------------------------------------
# functions
st_c    <- st_coordinates
st_coid <- st_centroid
mapThememin <- function(base_size = 10, title_size = 12, small_size = 8) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = title_size, colour = "black", hjust = 0.5),
plot.subtitle=element_text(size = base_size, colour = "black", hjust = 0.5, face="italic"),
plot.caption=element_text(size = small_size, colour = "black", hjust = 0.5),
axis.ticks = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
strip.text.x = element_text(size = small_size, face="italic"),
strip.text.y = element_text(size = small_size, face="italic"),
strip.background = element_rect(colour="transparent", fill="transparent"),
legend.title = element_text(size = small_size),
legend.text = element_text(size = small_size),
legend.key.size = unit(0.4, "cm"))
}
mapThememin2 <- function(base_size = 8, title_size = 10, small_size = 6) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = title_size, colour = "black", hjust = 0.5),
plot.subtitle=element_text(size = base_size, colour = "black", hjust = 0.5, face="italic"),
plot.caption=element_text(size = small_size, colour = "black", hjust = 0.5),
axis.ticks = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
strip.text.x = element_text(size = base_size),
strip.text.y = element_text(size = base_size),
strip.background = element_rect(colour="transparent", fill="transparent"),
legend.title = element_text(size = small_size),
legend.text = element_text(size = small_size),
legend.key.size = unit(0.25, "cm"))
}
corTheme <- function(base_size = 10, title_size = 12, small_size = 8){
theme(axis.text =  element_blank(),
axis.ticks = element_blank(),
text = element_text(size = 10),
panel.background = element_rect(fill = greyPalette5[1]),
axis.title.x = element_text(size = small_size),
axis.title.y = element_text(size = small_size),
plot.subtitle = element_text(hjust = 0.5, size = base_size),
plot.title = element_text(hjust = 0.5, size = title_size),
plot.caption=element_text(size = small_size, colour = "black", hjust = 0.5),
strip.background = element_rect(colour="transparent", fill="transparent"))
}
corTheme2 <- function(base_size = 10, title_size = 12, small_size = 8){
theme(axis.text =  element_text(size = small_size),
text = element_text(size = 10),
panel.background = element_rect(fill = greyPalette5[1]),
axis.title.x = element_text(size = small_size),
axis.title.y = element_text(size = small_size),
plot.subtitle = element_text(hjust = 0.5, size = base_size,  face="italic"),
plot.title = element_text(hjust = 0.5, size = title_size),
plot.caption=element_text(size = small_size, colour = "black", hjust = 0.5),
strip.background = element_rect(colour="transparent", fill="transparent"),
strip.text.x = element_text(size = small_size, face="italic"),
strip.text.y = element_text(size = small_size, face="italic"))
}
corTheme3 <- function(base_size = 9, title_size = 11, small_size = 7){
theme(axis.text =  element_text(size = small_size),
text = element_text(size = 10),
panel.background = element_rect(fill = greyPalette5[1]),
axis.title.x = element_text(size = small_size),
axis.title.y = element_text(size = small_size),
plot.subtitle = element_text(hjust = 0.5, size = base_size,  face="italic"),
plot.title = element_text(hjust = 0.5, size = title_size),
plot.caption=element_text(size = small_size, colour = "black", hjust = 0.5))
}
corTheme4 <- function(base_size = 9, title_size = 11, small_size = 7){
theme(axis.text =  element_text(size = small_size),
text = element_text(size = 10),
panel.background = element_rect(fill = greyPalette5[1]),
axis.title.x = element_text(size = small_size),
axis.title.y.right = element_text(size = small_size),
plot.subtitle = element_text(hjust = 0.5, size = base_size,  face="italic"),
plot.title = element_text(hjust = 0.5, size = title_size),
plot.caption=element_text(size = small_size, colour = "black", hjust = 0.5))
}
q5 <- function(variable) {as.factor(ntile(variable, 5))}
q <- function(variable) {as.factor(ntile(variable, 5))}
qBr <- function(df, variable, rnd) {
if (missing(rnd)) {
as.character(quantile(round(df[[variable]],0),
c(.01,.2,.4,.6,.8), na.rm=T))
} else if (rnd == FALSE | rnd == F) {
as.character(formatC(quantile(df[[variable]],
c(.01,.2,.4,.6,.8), na.rm=T),
digits = 3))
}
}
qBr2 <- function(df, variable, rnd) {
if (missing(rnd)) {
as.character(quantile(round(df[[variable]]*100,0)/100,
c(.01,.2,.4,.6,.8), na.rm=T))
} else if (rnd == FALSE | rnd == F) {
as.character(formatC(quantile(df[[variable]],
c(.01,.2,.4,.6,.8), na.rm=T),
digits = 3))
}
}
qBr3 <- function(df, variable, rnd) {
if (missing(rnd)) {
as.character(round(quantile(round(df[[variable]]*1000000,0),
c(.01,.2,.4,.6,.8), na.rm=T)),0)
} else if (rnd == FALSE | rnd == F) {
as.character(formatC(quantile(df[[variable]],
c(.01,.2,.4,.6,.8), na.rm=T),
digits = 3))
}
}
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
nn_function <- function(measureFrom,measureTo,k) {
measureFrom_Matrix <- as.matrix(measureFrom)
measureTo_Matrix <- as.matrix(measureTo)
nn <- get.knnx(measureTo, measureFrom, k)$nn.dist
output <- as.data.frame(nn) %>%
rownames_to_column(var = "thisPoint") %>%
gather(points, point_distance, V1:ncol(.)) %>%
arrange(as.numeric(thisPoint)) %>%
group_by(thisPoint) %>%
summarize(pointDistance = mean(point_distance)) %>%
arrange(as.numeric(thisPoint)) %>%
dplyr::select(-thisPoint) %>%
pull()
return(output)
}
myCrossValidate <- function(dataset, id, dependentVariable, indVariables) {
allPredictions <- data.frame()
cvID_list <- unique(dataset[[id]])
for (i in cvID_list) {
thisFold <- i
cat("This hold out fold is", thisFold, "\n")
fold.train <- filter(dataset, dataset[[id]] != thisFold) %>% as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
fold.test  <- filter(dataset, dataset[[id]] == thisFold) %>% as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
regression <-
glm(countMVTheft ~ ., family = "poisson",
data = fold.train %>%
dplyr::select(-geometry, -id))
thisPrediction <-
mutate(fold.test, Prediction = predict(regression, fold.test, type = "response"))
allPredictions <-
rbind(allPredictions, thisPrediction)
}
return(st_sf(allPredictions))
}
#----------------------------------------------------------------------------------------------------------
# Colors ("https://coolors.co/gradient-palette/a8f368-f9035e?number=7")
bluePalette5 <- c("#eff3ff","#bdd7e7","#6baed6","#3182bd","#08519c")
blue2Palette5 <- c("#08519c","#3182bd","#6baed6","#bdd7e7","#eff3ff")
H_bluePalette5 <- c("#eff3ff","#bdd7e7","#6baed6","#3182bd","#252525")
orangePalette5 <- c("#FFF2E8","#FFD6B6","#FEB984","#FE9D51","#FD801F")
orange2Palette5 <- c("#FFDFD0","#FFB89F","#FF926E","#FF6B3D","#FF440C")
greyPalette5 <- c("#f7f7f7","#cccccc","#969696","#636363","#252525")
greenPalette5 <- c("#edf8e9","#bae4b3","#74c476","#31a354","#006d2c")
purplePalette5 <- c("#f2f0f7","#cbc9e2","#9e9ac8","#756bb1","#54278f")
#----------------------------------------------------------------------------------------------------------
# LoadAPI(Min's key)
census_api_key("4bbe4bead4e5817f6a6b79e62c5bea69e77f1887", overwrite = TRUE)
## Address Points
addresses <- read.csv(unzip("Address_Points.zip","Address_Points.csv"))
## Address Points
addresses <- read_csv(unzip("Address_Points.zip","Address_Points.csv"))
## Community Garden Polygons
comm_gardens <- read.csv("./data/Community_Garden_Areas.csv", header = TRUE)
## Address Points
addresses <- read_csv(unzip("Address_Points.zip","Address_Points.csv"))
## Community Garden Polygons
comm_gardens <- read_csv("./data/Community_Garden_Areas.csv", header = TRUE)
## Address Points
addresses <- read_csv(unzip("Address_Points.zip","Address_Points.csv"))
## Community Garden Polygons
comm_gardens <- read.csv("./data/Community_Garden_Areas.csv", header = TRUE)
cama_comm <- read.csv("./data/Computer_Assisted_Mass_Appraisal_-_Commercial.csv", header = TRUE)
## Address Points
addresses <- read_csv(unzip("Address_Points.zip","Address_Points.csv"))
## Community Garden Polygons
comm_gardens <- read.csv("./data/Community_Garden_Areas.csv", header = TRUE)
## Address Points
addresses <- read_csv(unzip("Address_Points.zip","Address_Points.csv"))
## Community Garden Polygons
comm_gardens <- read.csv("./data/Community_Garden_Areas.csv", header = TRUE)
setwd("C:/Users/admin/Documents/GitHub/musa-rats")
setwd("C:/Users/admin/OneDrive - PennO365/Desktop")
setwd("C:/Users/admin/Documents/GitHub/musa-rats")
## Address Points
addresses <- read_csv(unzip("Address_Points.zip","Address_Points.csv"))
## Community Garden Polygons
comm_gardens <- read.csv("./data/Community_Garden_Areas.csv", header = TRUE)
## Address Points
addresses <- read_csv(unzip("Address_Points.zip","Address_Points.csv"))
## Community Garden Polygons
comm_gardens <- read.csv("https://github.com/henryfeinstein/musa-rats/tree/main//data/Community_Garden_Areas.csv", header = TRUE)
## Address Points
addresses <- read_csv(unzip("Address_Points.zip","Address_Points.csv"))
## Community Garden Polygons
comm_gardens <- read.csv("https://github.com/henryfeinstein/musa-rats/tree/main/data/Community_Garden_Areas.csv", header = TRUE)
## Address Points
addresses <- read_csv(unzip("Address_Points.zip","Address_Points.csv"))
## Community Garden Polygons
comm_gardens <- read.csv(./data/Community_Garden_Areas.csv", header = TRUE)
## CAMA Commercial
cama_comm <- read.csv("./data/Computer_Assisted_Mass_Appraisal_-_Commercial.csv", header = TRUE)
## Address Points
addresses <- read_csv(unzip("Address_Points.zip","Address_Points.csv"))
## Community Garden Polygons
comm_gardens <- read.csv("./data/Community_Garden_Areas.csv", header = TRUE)
library(tidyverse)
library(sf)
library(mapview)
options(scipen=999)
# load street centerlines from DC open data
centerlines <- st_read("./data/Street_Centerlines_2013/Street_Centerlines_2013.geojson") %>%
st_transform("ESRI:102685") %>%
filter(ROADTYPE == "Street")
# wards
wards <- st_read("./data/Wards.geojson") %>%
st_transform("ESRI:102685") %>%
select(ward_name = NAME,
ward_pop_15 = POP_2011_2015)
# convert street centerlines to block polygons
centerlines_pg <- as.data.frame(st_collection_extract(st_polygonize(st_union(centerlines)))) %>%
mutate(block_id = row_number()) %>%
st_as_sf()
# join wards to centerline polygons
centerlines_pg <- st_join(centerlines_pg, wards)
# load rat infestation dataset and spatialize
rats <- read.csv("./data/rats_to_blocks.csv.gz") %>%
na.omit() %>%
st_as_sf(. ,coords = c("LONGITUDE","LATITUDE"), crs = 4326) %>%
st_transform(crs = "ESRI:102685")
# spatial join to assign each rat datapoint to a block polygon
rats_block_join <- st_join(rats, centerlines_pg)
# count observations per block for mapping
block_dat <- left_join(centerlines_pg, rats_block_join %>%
st_drop_geometry() %>%
group_by(block_id) %>%
summarize(inspection_count = n(),
rats_found_yn = ifelse(1 %in% activity, 1, 0),
rats_found_count = sum(activity))) %>%
mutate(inspection_count = replace_na(inspection_count, 0),
rats_found_yn = replace_na(rats_found_yn, 0),
rats_found_count = replace_na(rats_found_count, 0),
area_acres = as.numeric(st_area(.)) / 43560)
# number of inspections
ggplot() + geom_sf(data = block_dat, aes(fill = inspection_count), color = "transparent")
# rats found y/n
ggplot() + geom_sf(data = block_dat, aes(fill = rats_found_yn), color = "transparent")
# count of rats found
ggplot() + geom_sf(data = block_dat, aes(fill = rats_found_count), color = "transparent")
# rat id rate (count of rats found / number of inspections)
ggplot() + geom_sf(data = block_dat, aes(fill = rats_found_count / inspection_count), color = "transparent")
# distribution of block size
ggplot() + geom_density(data = block_dat %>% filter(area_acres < 100), aes(area_acres))
# inspections by ward mapped
ggplot() + geom_sf(data = block_dat %>% group_by(ward_name) %>% summarize(inspections = sum(inspection_count)),
aes(fill = inspections), color = "transparent") +
geom_sf_text(data = block_dat %>% group_by(ward_name) %>% summarize(inspections = sum(inspection_count)),
aes(label = ward_name))
# inspections per person by ward
ggplot() + geom_sf(data = block_dat %>% group_by(ward_name) %>% summarize(inspections = sum(inspection_count),
pop15 = first(ward_pop_15)),
aes(fill = inspections / pop15), color = "transparent") +
geom_sf_text(data = block_dat %>% group_by(ward_name) %>% summarize(inspections = sum(inspection_count)),
aes(label = ward_name))
# rats found per person by ward
ggplot() + geom_sf(data = block_dat %>%
group_by(ward_name) %>%
summarize(inspections = sum(inspection_count),
rats_found_count = sum(rats_found_count),
pop15 = first(ward_pop_15)) %>%
mutate(rats_found_rate = rats_found_count / inspections),
aes(fill = rats_found_count / pop15), color = "transparent") +
geom_sf_text(data = block_dat %>% group_by(ward_name) %>% summarize(inspections = sum(inspection_count)),
aes(label = ward_name))
# rat id rate by ward mapped
ggplot() + geom_sf(data = block_dat %>%
group_by(ward_name) %>%
summarize(inspections = sum(inspection_count),
rats_found_count = sum(rats_found_count)) %>%
mutate(rats_found_rate = rats_found_count / inspections),
aes(fill = rats_found_rate), color = "transparent") +
geom_sf_text(data = block_dat %>% group_by(ward_name) %>% summarize(inspections = sum(inspection_count)),
aes(label = ward_name))
# rats found y/n
ggplot() + geom_sf(data = block_dat, aes(fill = rats_found_yn), color = "transparent")
# number of inspections
ggplot() + geom_sf(data = block_dat, aes(fill = inspection_count), color = "transparent")
# count of rats found
ggplot() + geom_sf(data = block_dat, aes(fill = rats_found_count), color = "transparent")
# rat id rate (count of rats found / number of inspections)
ggplot() + geom_sf(data = block_dat, aes(fill = rats_found_count / inspection_count), color = "transparent")
# block size
ggplot() + geom_sf(data = block_dat, aes(fill = area_acres), color = "transparent")
# inspections by ward mapped
ggplot() + geom_sf(data = block_dat %>% group_by(ward_name) %>% summarize(inspections = sum(inspection_count)),
aes(fill = inspections), color = "transparent") +
geom_sf_text(data = block_dat %>% group_by(ward_name) %>% summarize(inspections = sum(inspection_count)),
aes(label = ward_name))
# rat id rate by ward mapped
ggplot() + geom_sf(data = block_dat %>%
group_by(ward_name) %>%
summarize(inspections = sum(inspection_count),
rats_found_count = sum(rats_found_count)) %>%
mutate(rats_found_rate = rats_found_count / inspections),
aes(fill = rats_found_rate), color = "transparent") +
geom_sf_text(data = block_dat %>% group_by(ward_name) %>% summarize(inspections = sum(inspection_count)),
aes(label = ward_name))
# inspections per person by ward
ggplot() + geom_sf(data = block_dat %>% group_by(ward_name) %>% summarize(inspections = sum(inspection_count),
pop15 = first(ward_pop_15)),
aes(fill = inspections / pop15), color = "transparent") +
geom_sf_text(data = block_dat %>% group_by(ward_name) %>% summarize(inspections = sum(inspection_count)),
aes(label = ward_name))
# rats found per person by ward
ggplot() + geom_sf(data = block_dat %>%
group_by(ward_name) %>%
summarize(inspections = sum(inspection_count),
rats_found_count = sum(rats_found_count),
pop15 = first(ward_pop_15)) %>%
mutate(rats_found_rate = rats_found_count / inspections),
aes(fill = rats_found_count / pop15), color = "transparent") +
geom_sf_text(data = block_dat %>% group_by(ward_name) %>% summarize(inspections = sum(inspection_count)),
aes(label = ward_name))
# rat id rate by ward mapped
ggplot() + geom_sf(data = block_dat %>%
group_by(ward_name) %>%
summarize(inspections = sum(inspection_count),
rats_found_count = sum(rats_found_count)) %>%
mutate(rats_found_rate = rats_found_count / inspections),
aes(fill = rats_found_rate), color = "transparent") +
geom_sf_text(data = block_dat %>% group_by(ward_name) %>% summarize(inspections = sum(inspection_count)),
aes(label = ward_name))
st_write(centerlines_pg, "data/city_blocks.geojson")
# count of rats found
ggplot() + geom_sf(data = block_dat, aes(fill = rats_found_count), color = "transparent")
# count of rats found
ggplot() + geom_sf(data = block_dat, aes(fill = rats_found_count), color = "transparent") +
labs(title = "Number of Rats Found")
# count of rats found
ggplot() + geom_sf(data = block_dat, aes(fill = rats_found_count), color = "transparent") +
labs(title = "Number of Rats Found by Block")
# rat id rate (count of rats found / number of inspections)
ggplot() + geom_sf(data = block_dat, aes(fill = rats_found_count / inspection_count), color = "transparent") +
labs(title = "Rat ID Rate (Count of Rats Found / Number of Inspections")
# rat id rate (count of rats found / number of inspections)
ggplot() + geom_sf(data = block_dat, aes(fill = rats_found_count / inspection_count), color = "transparent") +
labs(title = "Rat ID Rate (Count of Rats Found / Number of Inspections) by Block")
# rat id rate (count of rats found / number of inspections)
ggplot() + geom_sf(data = block_dat, aes(fill = rats_found_count / inspection_count), color = "transparent") +
labs(title = "Rat ID Rate (Count of Rats Found / Number of Inspections) \nby Block")
# block size
ggplot() + geom_sf(data = block_dat, aes(fill = area_acres), color = "transparent")
# block size
ggplot() + geom_sf(data = block_dat, aes(fill = area_acres), color = "transparent") +
labs(title = "Block Size (Acres)")
# inspections by ward mapped
ggplot() + geom_sf(data = block_dat %>% group_by(ward_name) %>% summarize(inspections = sum(inspection_count)),
aes(fill = inspections), color = "transparent") +
geom_sf_text(data = block_dat %>% group_by(ward_name) %>% summarize(inspections = sum(inspection_count)),
aes(label = ward_name))
# inspections by ward mapped
ggplot() + geom_sf(data = block_dat %>% group_by(ward_name) %>% summarize(inspections = sum(inspection_count)),
aes(fill = inspections), color = "transparent") +
geom_sf_text(data = block_dat %>% group_by(ward_name) %>% summarize(inspections = sum(inspection_count)),
aes(label = ward_name)) +
labs(title = "Inspections by Ward")
# rat id rate by ward mapped
ggplot() + geom_sf(data = block_dat %>%
group_by(ward_name) %>%
summarize(inspections = sum(inspection_count),
rats_found_count = sum(rats_found_count)) %>%
mutate(rats_found_rate = rats_found_count / inspections),
aes(fill = rats_found_rate), color = "transparent") +
geom_sf_text(data = block_dat %>% group_by(ward_name) %>% summarize(inspections = sum(inspection_count)),
aes(label = ward_name)) +
labs(title = "Rat ID Rate by Ward")
# inspections per person by ward
ggplot() + geom_sf(data = block_dat %>% group_by(ward_name) %>% summarize(inspections = sum(inspection_count),
pop15 = first(ward_pop_15)),
aes(fill = inspections / pop15), color = "transparent") +
geom_sf_text(data = block_dat %>% group_by(ward_name) %>% summarize(inspections = sum(inspection_count)),
aes(label = ward_name)) +
labs(title = "Inspections/Person by Ward")
# rats found per person by ward
ggplot() + geom_sf(data = block_dat %>%
group_by(ward_name) %>%
summarize(inspections = sum(inspection_count),
rats_found_count = sum(rats_found_count),
pop15 = first(ward_pop_15)) %>%
mutate(rats_found_rate = rats_found_count / inspections),
aes(fill = rats_found_count / pop15), color = "transparent") +
geom_sf_text(data = block_dat %>% group_by(ward_name) %>% summarize(inspections = sum(inspection_count)),
aes(label = ward_name)) +
labs(title = "Rats Found/Person by Ward")
